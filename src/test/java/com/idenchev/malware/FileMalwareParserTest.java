package com.idenchev.malware;

import com.idenchev.malware.validate.BeginsWithValidator;
import com.idenchev.malware.validate.CPanelUsernameValidator;
import com.idenchev.malware.validate.ContainsValidator;
import com.idenchev.malware.validate.EndsWithValidator;
import com.idenchev.malware.validate.LineValidatorChain;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

class FileMalwareParserTest {
    MalwareParser malwareParser;
    LineParser lineParser;

    List<String> forbiddenUsernames;
    List<String> forbiddenBeginsWithWords;
    List<String> forbiddenContainsWords;
    List<String> forbiddenEndsWithWords;

    Class<? extends FileMalwareParserTest> clazz = getClass();

    @BeforeEach
    void setUp() {
        forbiddenUsernames = new ArrayList<>();
        forbiddenBeginsWithWords = new ArrayList<>();
        forbiddenContainsWords = new ArrayList<>();
        forbiddenEndsWithWords = new ArrayList<>();

        LineValidatorChain chain = new LineValidatorChain();
        chain.addValidator(new CPanelUsernameValidator(forbiddenUsernames));
        chain.addValidator(new BeginsWithValidator(forbiddenBeginsWithWords));
        chain.addValidator(new ContainsValidator(forbiddenContainsWords));
        chain.addValidator(new EndsWithValidator(forbiddenEndsWithWords));

        lineParser = new LineParserImpl(chain);
    }

    @Nested
    public class UsernameTests {

        @BeforeEach
        void setUp() {
            malwareParser = new FileMalwareParser(getTestScanFile("scan.txt"), lineParser);
        }

        @Test
        void whenLoadingEmptyScanFile_shouldReturnListWithSize0() {
            malwareParser = new FileMalwareParser(getTestScanFile("scan_empty.txt"), lineParser);
            assertEquals(malwareParser.parseInfectedUsers().size(), 0);
        }

        @Test
        void givenEmptyForbiddenUserList_whenLoadingScanWith2Users_shouldReturnListWithSize2() {
            Set<InfectedUser> users = malwareParser.parseInfectedUsers();
            assertEquals(users.size(), 2);
        }

        @Test
        void givenForbiddenUserListWith1User_whenLoadingScanWith2UsersMatching1User_shouldReturnListWithSize1() {
            forbiddenUsernames.add("sistecsa");
            Set<InfectedUser> users = malwareParser.parseInfectedUsers();
            assertEquals(users.size(), 1);
        }

        @Test
        void givenForbiddenUserListWith2Users_whenLoadingScanWithThe2Users_shouldReturnListWithSize0() {
            forbiddenUsernames.add("sistecsa");
            forbiddenUsernames.add("smvcutof");
            Set<InfectedUser> users = malwareParser.parseInfectedUsers();
            assertEquals(users.size(), 0);
        }

        InputStream getTestScanFile(String filename) {
            return getClass().getClassLoader().getResourceAsStream("scan/username/" + filename);
            // return Paths.get("src", "test", "resources", "scan", "username", filename).toFile();
        }
    }

    @Nested
    public class BeginsWithAnyWordTests {
        @BeforeEach
        void setUp() {
            malwareParser = new FileMalwareParser(getTestScanFile("scan.txt"), lineParser);
        }

        @Test
        void whenLoadingEmptyScanFile_shouldReturnListWithSize0() {
            malwareParser = new FileMalwareParser(getTestScanFile("scan_empty.txt"), lineParser);
            assertEquals(malwareParser.parseInfectedUsers().size(), 0);
        }

        @Test
        void givenEmptyBeginsWithList_whenLoadingScanFileWith3Users_eachWith1File_shouldReturnListWithSize3() {
            assertEquals(malwareParser.parseInfectedUsers().size(), 3);
        }

        @Test
        void givenListWith1Word_whenLoadingFileWith2UsersMatchingThatWord_shouldReturnListWithSize1() {
            forbiddenBeginsWithWords.add("/quarantine_clamavconnector");
            Set<InfectedUser> list = malwareParser.parseInfectedUsers();
            assertEquals(list.size(), 1);
        }

        @Test
        void givenListCoveringAllScanFiles_shouldReturnListWithSize0() {
            forbiddenBeginsWithWords.add("/quarantine_clamavconnector");
            forbiddenBeginsWithWords.add("/logs");
            Set<InfectedUser> list = malwareParser.parseInfectedUsers();
            assertEquals(list.size(), 0);
        }

        InputStream getTestScanFile(String filename) {
            return clazz.getClassLoader().getResourceAsStream("scan/begins/" + filename);
            // return Paths.get("src", "test", "resources", "scan", "begins", filename).toFile();
        }
    }

    @Nested
    public class ContainsAnyWordTests {
        @BeforeEach
        void setUp() {
            malwareParser = new FileMalwareParser(getTestScanFile("scan.txt"), lineParser);
        }

        @Test
        void givenEmptyContainsList_whenLoadingScanFile_shouldReturnListWithTheSizeOfTheScanFile() {
            assertEquals(malwareParser.parseInfectedUsers().size(), 3);
        }

        @Test
        void givenContaisListWith1User_whenLoadingScanFileWith3Users_matching1_shouldReturnListWithSizeOf2() {
            forbiddenContainsWords.add("twentyseventeen/functions.php");
            assertEquals(malwareParser.parseInfectedUsers().size(), 2);
        }

        @Test
        void givenNonMatchingList_whenLoadingScanFileWith3Users_shouldReturnListWIthSize3() {
            forbiddenContainsWords.add("azis");
            assertEquals(malwareParser.parseInfectedUsers().size(), 3);
        }

        InputStream getTestScanFile(String filename) {
            return clazz.getClassLoader().getResourceAsStream("scan/contains/" + filename);
            //return Paths.get("src", "test", "resources", "scan", "contains", filename).toFile();
        }
    }

    @Nested
    public class EndsWithAnyWordTests {
        @BeforeEach
        void setUp() {
            malwareParser = new FileMalwareParser(getTestScanFile("scan.txt"), lineParser);
        }

        @Test
        void givenEmptyList_whenLoadingScanWith3Users_shouldReturnListWithSize3() {
            assertEquals(malwareParser.parseInfectedUsers().size(), 3);
        }

        @Test
        void givenListWith1Filter_whenLoadingScanWith3Users_matching1Result_shouldReturnListWithSize2() {
            forbiddenEndsWithWords.add(".gif");
            assertEquals(malwareParser.parseInfectedUsers().size(), 2);
        }

        InputStream getTestScanFile(String filename) {
            return clazz.getClassLoader().getResourceAsStream("scan/endswith/" + filename);
            // return Paths.get("src", "test", "resources", "scan", "endswith", filename).toFile();
        }
    }
}