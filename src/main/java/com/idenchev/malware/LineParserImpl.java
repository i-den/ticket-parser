package com.idenchev.malware;

import com.idenchev.malware.validate.LineValidatorChain;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LineParserImpl implements LineParser {
    public static class RegExDetails {
        // https://regex101.com/r/vCOUTO/1
        static final String VALID_LINE_REGEX = "(?<infectedFileFullPath>/(?<home>home)/(?<user>.*?)(?<infectedFile>/.*?))(?<separator>:\\s)(?<infectedType>.*)";
        static final Pattern PATTERN = Pattern.compile(VALID_LINE_REGEX);

        public enum RegExGroup {
            INFECTED_FILE_FULL_PATH("infectedFileFullPath"),
            HOME("home"),
            USER("user"),
            INFECTED_FILE("infectedFile"),
            INFECTED_TYPE("infectedType");
            String groupName;

            RegExGroup(String groupName) {
                this.groupName = groupName;
            }

            public String getGroupName() {
                return groupName;
            }
        }
    }

    String line;
    Matcher matcher;
    LineValidatorChain lineValidatorChain;

    public LineParserImpl(LineValidatorChain lineValidatorChain) {
        this.lineValidatorChain = lineValidatorChain;
    }

    @Override
    public void parseLine(String line) {
        this.line = line;
        matcher = RegExDetails.PATTERN.matcher(line);
    }

    @Override
    public boolean lineIsValid() {
        if (matcher.matches())
            return lineValidatorChain.lineIsValid(matcher);
        return false;
    }

    @Override
    public String getUsername() {
        return matcher.group(RegExDetails.RegExGroup.USER.groupName);
    }

    @Override
    public String getInfectedFile() {
        return matcher.group(RegExDetails.RegExGroup.INFECTED_FILE_FULL_PATH.groupName);
    }
}
